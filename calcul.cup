// $Id: calcul.cup 505 2017-09-25 12:44:47Z coelho $

import java_cup.runtime.*;
import java.util.*;
import java.io.*;

  

parser code {:
  public static void main(String args[]) throws Exception {
    if(args.length==0) {
      new Parser(new Lexer(new InputStreamReader(System.in))).parse();
    } else {
      new Parser(new Lexer(new StringReader(args[0]))).parse();
    }
  }
  public Map<String, Double> map;

:}

// definition des token
terminal OP_PLUS, OP_MINUS, OP_MULT, OP_DIVIDE, OP_ASSIGN, OP_EQ, OP_NEQ, OP_GREATER, OP_SMALLER;
terminal TK_PAR_OPEN, TK_PAR_CLOSE, TK_IDENT;
terminal TK_DONE;
terminal Double TK_VAL; 

// definition des etats intermediaires
non terminal commandes, commande;
non terminal Double expression;

// associativite et priorite des operateurs
precedence left OP_PLUS, OP_MINUS;
precedence left OP_MULT, OP_DIVIDE;

// objectif
start with commandes;

commandes ::=
    commande
  | commandes commande
;

commande ::=
    expression:e // expression seule, affichage
	{: System.out.println("# " + e); :}
    TK_DONE
;

expression ::=
  TK_PAR_OPEN expression:e1 TK_PAR_CLOSE {: RESULT = e1 ; :}
  | TK_IDENT:v {: RESULT=map.get(v); :}
  | TK_IDENT:v TK_PAR_OPEN expression:e1 TK_PAR_CLOSE {: 
  Double value=e1; 
  if(v.equals("sin")) {value = Math.sin(e1); } 
  else if (v.equals("cos")) {value = Math.cos(e1); } 
  RESULT = value; :}
  | expression:e1 OP_PLUS expression:e2 {: RESULT = e1 + e2 ; :}
  | expression:e1 OP_MINUS expression:e2 {: RESULT = e1 - e2 ; :}
  | expression:e1 OP_MULT expression:e2 {: RESULT = e1 * e2 ; :}
  | expression:e1 OP_DIVIDE expression:e2 {: RESULT = e1 / e2 ; :}
  | OP_PLUS expression:e1 {: RESULT = + e1 ; :}
  | OP_MINUS expression:e1 {: RESULT = - e1 ; :}
  | TK_VAL:v 	{: RESULT = v; :}
;
